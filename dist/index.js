// Generated by CoffeeScript 1.3.3
(function() {
  var defaultHandler, request;

  request = require("request");

  require("bling");

  defaultHandler = function(callback) {
    return function(err, resp, body) {
      if (err) {
        return callback(err, null);
      }
      try {
        return callback(null, JSON.parse(body));
      } catch (err) {
        return callback(err, null);
      }
    };
  };

  exports.init = function(baseUrl) {
    return {
      getDecisions: function(apikey, sessionCode, ownerCode, agentCode, pointCode, callback) {
        return request({
          method: "GET",
          url: [baseUrl, ownerCode, agentCode, "decision"].join("/"),
          qs: {
            point: pointCode
          },
          headers: {
            "x-mpath-apikey": apikey,
            "x-mpath-session": sessionCode
          }
        }, defaultHandler(callback));
      },
      sendReward: function(apikey, sessionCode, ownerCode, agentCode, goalCode, callback) {
        return request({
          method: "POST",
          url: [baseUrl, ownerCode, agentCode, "goal", goalCode].join("/"),
          headers: {
            "x-mpath-apikey": apikey,
            "x-mpath-session": sessionCode
          }
        }, defaultHandler(callback));
      },
      expireSession: function(apikey, ownerCode, sessionCode, callback) {
        return request({
          method: "GET",
          url: [baseUrl, ownerCode, agentCode, "expire"].join("/"),
          headers: {
            "x-mpath-apikey": apikey,
            "x-mpath-session": sessionCode
          }
        }, defaultHandler(callback));
      },
      createAgent: function(apikey, ownerCode, agentCode, agentJson, callback) {
        return request({
          method: "PUT",
          url: [baseUrl, ownerCode, agentCode].join("/"),
          headers: {
            "x-mpath-apikey": apikey
          },
          json: agentJson
        }, defaultHandler(callback));
      },
      createApiKey: function(email, ownerCode, callback) {
        if (!ownerCode) {
          ownerCode = $.random.string(16);
        }
        return request({
          method: "PUT",
          url: [baseUrl, ownerCode, "create-key", email].join("/")
        }, defaultHandler(callback));
      }
    };
  };

}).call(this);
